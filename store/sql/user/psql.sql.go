// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: psql.sql

package user

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (username, email, PASSWORD, created_at)
    VALUES ($1, $2, $3, $4)
`

type CreateUserParams struct {
	Username  string
	Email     interface{}
	Password  interface{}
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, username, email, password, created_at
FROM
    users
ORDER BY
    id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectByEmail = `-- name: SelectByEmail :one
SELECT
    id, username, email, password, created_at
FROM
    users
WHERE
    email = $1
LIMIT 1
`

func (q *Queries) SelectByEmail(ctx context.Context, email interface{}) (User, error) {
	row := q.db.QueryRowContext(ctx, selectByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const selectByID = `-- name: SelectByID :one
SELECT
    id, username, email, password, created_at
FROM
    users
WHERE
    id = $1
LIMIT 1
`

func (q *Queries) SelectByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, selectByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE
    users
SET
    username = $1
WHERE
    id = $2
`

type UpdateUserParams struct {
	Username string
	ID       uuid.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Username, arg.ID)
}
