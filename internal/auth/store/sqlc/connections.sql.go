// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: connections.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createConnection = `-- name: CreateConnection :one
INSERT INTO connections (provider_id, user_id)
    VALUES ($1, $2)
RETURNING
    provider_id, user_id, created_at, updated_at
`

type CreateConnectionParams struct {
	ProviderID string    `json:"providerID"`
	UserID     uuid.UUID `json:"userID"`
}

func (q *Queries) CreateConnection(ctx context.Context, arg *CreateConnectionParams) (Connection, error) {
	row := q.db.QueryRowContext(ctx, createConnection, arg.ProviderID, arg.UserID)
	var i Connection
	err := row.Scan(
		&i.ProviderID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteConnection = `-- name: DeleteConnection :exec
DELETE FROM connections
WHERE provider_id = $1
`

func (q *Queries) DeleteConnection(ctx context.Context, providerID string) error {
	_, err := q.db.ExecContext(ctx, deleteConnection, providerID)
	return err
}

const deleteUserConnections = `-- name: DeleteUserConnections :exec
DELETE FROM connections
WHERE user_id = $1
`

func (q *Queries) DeleteUserConnections(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserConnections, userID)
	return err
}

const getConnection = `-- name: GetConnection :one
SELECT
    provider_id, user_id, created_at, updated_at
FROM
    connections
WHERE
    provider_id = $1
LIMIT 1
`

func (q *Queries) GetConnection(ctx context.Context, providerID string) (Connection, error) {
	row := q.db.QueryRowContext(ctx, getConnection, providerID)
	var i Connection
	err := row.Scan(
		&i.ProviderID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserConnections = `-- name: ListUserConnections :many
SELECT
    provider_id, user_id, created_at, updated_at
FROM
    connections
WHERE
    user_id = $1
ORDER BY
    provider_id
LIMIT $2 OFFSET $3
`

type ListUserConnectionsParams struct {
	UserID uuid.UUID `json:"userID"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListUserConnections(ctx context.Context, arg *ListUserConnectionsParams) ([]Connection, error) {
	rows, err := q.db.QueryContext(ctx, listUserConnections, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Connection{}
	for rows.Next() {
		var i Connection
		if err := rows.Scan(
			&i.ProviderID,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
